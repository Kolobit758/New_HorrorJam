using System.Collections;
using UnityEngine;
using TMPro;

public class SignScript : MonoBehaviour
{
    PlayerManager playerManager;
    MapTemplateScript mapTemplateScript;
    public GameManager gameManager;
    public StatusData thisStatusData; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏ô‡∏µ‡πâ
    public TextMeshProUGUI textMeshPro; // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏â‡∏≤‡∏Å

    void Start()
    {
        gameManager = FindFirstObjectByType<GameManager>();
        playerManager = FindFirstObjectByType<PlayerManager>();
        mapTemplateScript = FindFirstObjectByType<MapTemplateScript>();

        if (thisStatusData != null && textMeshPro != null)
        {
            textMeshPro.text = thisStatusData.signText;
        }
    }

    public void PrintInfo()
    {
        if (thisStatusData != null)
            Debug.Log("INFO : " + thisStatusData.signText);
    }

    // üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏î‡∏õ‡πâ‡∏≤‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏≠‡∏ö (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
    public void ChageRound()
    {
        StartCoroutine(WaitGhostJumpscareThenChangeRound());
    }

    private IEnumerator WaitGhostJumpscareThenChangeRound()
    {
        bool hasGhost = false;

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å JumpScare ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡πÅ‡∏°‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        foreach (GameObject ghost in mapTemplateScript.ghostGameObj)
        {
            if (ghost == null)
                continue;

            GhostScript ghostScript = ghost.GetComponent<GhostScript>();
            if (ghostScript != null)
            {
                hasGhost = true;
                ghostScript.JumpScare();
            }
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ú‡∏µ ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ JumpScare ‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à
        if (hasGhost)
        {
            Debug.Log("‚è≥ Waiting for ghosts to finish jumpscare...");
            yield return new WaitUntil(() => !GhostScript.anyGhostJumpscaring);
        }

        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏≠‡∏ö
        if (thisStatusData != null)
            playerManager.ChangePlayerStatus(thisStatusData);

        Debug.Log("üåç Changing to new round...");
        gameManager.ChangeRound();
    }

    // üîπ ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Event Sign (‡∏Å‡πá‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô)
    public void ChageRoundEvent()
    {
        StartCoroutine(WaitGhostJumpscareThenChangeRoundEvent());
    }

    private IEnumerator WaitGhostJumpscareThenChangeRoundEvent()
    {
        bool hasGhost = false;

        if (mapTemplateScript.ghostGameObj != null)
        {
            foreach (GameObject ghost in mapTemplateScript.ghostGameObj)
            {
                if (ghost == null) continue;
                GhostScript ghostScript = ghost.GetComponent<GhostScript>();
                if (ghostScript != null)
                {
                    hasGhost = true;
                    ghostScript.JumpScare();
                }
            }
        }

        if (hasGhost)
        {
            Debug.Log("‚è≥ Waiting for ghosts to finish jumpscare...");
            yield return new WaitUntil(() => !GhostScript.anyGhostJumpscaring);
        }

        if (thisStatusData != null)
            playerManager.ChangePlayerStatus(thisStatusData);

        Debug.Log("üé≠ Changing event round...");
        gameManager.ChangeRound(thisStatusData.eventName);
    }
}
